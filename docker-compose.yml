version: '3.7'

services:
  # 3 replica sets: primary rs1
  rs1:
    container_name: rs1
    image: mongo
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    restart: always
    command: mongod --replSet replica-set
    networks:
      panic_net:
        ipv4_address: '${DB_IP_REPLICA_1}'

  rs2:
    container_name: rs2
    image: mongo
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    restart: always
    command: mongod --replSet replica-set
    networks:
      panic_net:
        ipv4_address: '${DB_IP_REPLICA_2}'

  rs3:
    container_name: rs3
    image: mongo
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    restart: always
    command: mongod --replSet replica-set
    networks:
      panic_net:
        ipv4_address: '${DB_IP_REPLICA_3}'
    
  # simply container to startup the replica set
  mongo-startup:
    container_name: mongo-startup
    image: mongo
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - rs1
      - rs2
      - rs3
    command: >
      mongosh --host rs1:27017 --eval 'db=(new Mongo("rs1:27017")).getDB("local"); 
        config = {
          "_id" : "replica-set",
          "members" : [
            {"_id" : 0,"host" : "rs1:27017"},
            {"_id" : 1,"host" : "rs2:27017"},
            {"_id" : 2,"host" : "rs3:27017"}
          ] 
        };
        rs.initiate(config);'
    networks:
      panic_net:
        ipv4_address: '${DB_IP_REPLICA_STARTUP}'

  redis:
    image: 'redis'
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    networks:
      panic_net:
        ipv4_address: '${REDIS_IP}'
    restart: always
    container_name: 'redis'

  rabbitmq:
    image: 'rabbitmq:3-management'
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    networks:
      panic_net:
        ipv4_address: '${RABBIT_IP}'
    restart: always
    container_name: 'rabbitmq'

  alerter:
    environment:
      - 'UNIQUE_ALERTER_IDENTIFIER=${UNIQUE_ALERTER_IDENTIFIER}'
      - 'DB_NAME=${DB_NAME}'
      - 'DB_IP=${DB_IP_REPLICA_1}'
      - 'DB_PORT=${DB_PORT}'
      - 'REDIS_DB=${REDIS_DB}'
      - 'REDIS_IP=${REDIS_IP}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'RABBIT_IP=${RABBIT_IP}'
      - 'RABBIT_PORT=${RABBIT_PORT}'
      - 'LOGGING_LEVEL=${LOGGING_LEVEL}'
      - 'DATA_STORE_LOG_FILE_TEMPLATE=${DATA_STORE_LOG_FILE_TEMPLATE}'
      - 'MONITORS_LOG_FILE_TEMPLATE=${MONITORS_LOG_FILE_TEMPLATE}'
      - 'TRANSFORMERS_LOG_FILE_TEMPLATE=${TRANSFORMERS_LOG_FILE_TEMPLATE}'
      - 'MANAGERS_LOG_FILE_TEMPLATE=${MANAGERS_LOG_FILE_TEMPLATE}'
      - 'ALERTERS_LOG_FILE_TEMPLATE=${ALERTERS_LOG_FILE_TEMPLATE}'
      - 'ALERT_ROUTER_LOG_FILE=${ALERT_ROUTER_LOG_FILE}'
      - 'ALERT_ROUTER_PUBLISHING_QUEUE_SIZE=${ALERT_ROUTER_PUBLISHING_QUEUE_SIZE}'
      - 'CONFIG_PUBLISHING_QUEUE_SIZE=${CONFIG_PUBLISHING_QUEUE_SIZE}'
      - 'CONFIG_MANAGER_LOG_FILE=${CONFIG_MANAGER_LOG_FILE}'
      - 'GITHUB_RELEASES_TEMPLATE=${GITHUB_RELEASES_TEMPLATE}'
      - 'SYSTEM_MONITOR_PERIOD_SECONDS=${SYSTEM_MONITOR_PERIOD_SECONDS}'
      - 'GITHUB_MONITOR_PERIOD_SECONDS=${GITHUB_MONITOR_PERIOD_SECONDS}'
      - 'DOCKERHUB_MONITOR_PERIOD_SECONDS=${DOCKERHUB_MONITOR_PERIOD_SECONDS}'
      - 'DATA_TRANSFORMER_PUBLISHING_QUEUE_SIZE=${DATA_TRANSFORMER_PUBLISHING_QUEUE_SIZE}'
      - 'ALERTER_PUBLISHING_QUEUE_SIZE=${ALERTER_PUBLISHING_QUEUE_SIZE}'
      - 'ENABLE_CONSOLE_ALERTS=${ENABLE_CONSOLE_ALERTS}'
      - 'ENABLE_LOG_ALERTS=${ENABLE_LOG_ALERTS}'
      - 'CHANNEL_HANDLERS_LOG_FILE_TEMPLATE=${CHANNEL_HANDLERS_LOG_FILE_TEMPLATE}'
      - 'ALERTS_LOG_FILE=${ALERTS_LOG_FILE}'
      - 'TWIML=${TWIML}'
      - 'TWIML_IS_URL=${TWIML_IS_URL}'
      - 'CHANNELS_MANAGER_PUBLISHING_QUEUE_SIZE=${CHANNELS_MANAGER_PUBLISHING_QUEUE_SIZE}'
      - 'HEALTH_CHECKER_LOG_FILE_TEMPLATE=${HEALTH_CHECKER_LOG_FILE_TEMPLATE}'
      - 'NODE_MONITOR_PERIOD_SECONDS=${NODE_MONITOR_PERIOD_SECONDS}'
      - 'CHAINLINK_CONTRACTS_MONITOR_PERIOD_SECONDS=${CHAINLINK_CONTRACTS_MONITOR_PERIOD_SECONDS}'
      - 'NETWORK_MONITOR_PERIOD_SECONDS=${NETWORK_MONITOR_PERIOD_SECONDS}'
      - 'DOCKERHUB_TAGS_TEMPLATE=${DOCKERHUB_TAGS_TEMPLATE}'
      - 'SUBSTRATE_API_IP=${SUBSTRATE_API_IP}'
      - 'SUBSTRATE_API_PORT=${SUBSTRATE_API_PORT}'
      - 'WAIT_HOSTS=${DB_IP_REPLICA_1}:${DB_PORT}, ${REDIS_IP}:${REDIS_PORT}, ${RABBIT_IP}:${RABBIT_PORT}'
    build:
      context: './'
      dockerfile: './alerter/Alerter_Dockerfile'
    image: 'simplyvc/panic_alerter:1.3.0'
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - './config:/opt/panic/config'
      - './alerter/logs:/opt/panic/alerter/logs'
    restart: always
    networks:
      panic_net:
        ipv4_address: '${ALERTER_IP}'
    depends_on:
      - rs1
      - redis
      - rabbitmq
      - api

  health-checker:
    environment:
      - 'UNIQUE_ALERTER_IDENTIFIER=${UNIQUE_ALERTER_IDENTIFIER}'
      - 'DB_NAME=${DB_NAME}'
      - 'DB_IP=${DB_IP_REPLICA_1}'
      - 'DB_PORT=${DB_PORT}'
      - 'REDIS_DB=${REDIS_DB}'
      - 'REDIS_IP=${REDIS_IP}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'RABBIT_IP=${RABBIT_IP}'
      - 'RABBIT_PORT=${RABBIT_PORT}'
      - 'LOGGING_LEVEL=${LOGGING_LEVEL}'
      - 'ALERT_ROUTER_PUBLISHING_QUEUE_SIZE=${ALERT_ROUTER_PUBLISHING_QUEUE_SIZE}'
      - 'CONFIG_PUBLISHING_QUEUE_SIZE=${CONFIG_PUBLISHING_QUEUE_SIZE}'
      - 'DATA_STORE_LOG_FILE_TEMPLATE=${DATA_STORE_LOG_FILE_TEMPLATE}'
      - 'MONITORS_LOG_FILE_TEMPLATE=${MONITORS_LOG_FILE_TEMPLATE}'
      - 'TRANSFORMERS_LOG_FILE_TEMPLATE=${TRANSFORMERS_LOG_FILE_TEMPLATE}'
      - 'MANAGERS_LOG_FILE_TEMPLATE=${MANAGERS_LOG_FILE_TEMPLATE}'
      - 'ALERTERS_LOG_FILE_TEMPLATE=${ALERTERS_LOG_FILE_TEMPLATE}'
      - 'ALERT_ROUTER_LOG_FILE=${ALERT_ROUTER_LOG_FILE}'
      - 'CONFIG_MANAGER_LOG_FILE=${CONFIG_MANAGER_LOG_FILE}'
      - 'GITHUB_RELEASES_TEMPLATE=${GITHUB_RELEASES_TEMPLATE}'
      - 'SYSTEM_MONITOR_PERIOD_SECONDS=${SYSTEM_MONITOR_PERIOD_SECONDS}'
      - 'GITHUB_MONITOR_PERIOD_SECONDS=${GITHUB_MONITOR_PERIOD_SECONDS}'
      - 'DOCKERHUB_MONITOR_PERIOD_SECONDS=${DOCKERHUB_MONITOR_PERIOD_SECONDS}'
      - 'DATA_TRANSFORMER_PUBLISHING_QUEUE_SIZE=${DATA_TRANSFORMER_PUBLISHING_QUEUE_SIZE}'
      - 'ALERTER_PUBLISHING_QUEUE_SIZE=${ALERTER_PUBLISHING_QUEUE_SIZE}'
      - 'ENABLE_CONSOLE_ALERTS=${ENABLE_CONSOLE_ALERTS}'
      - 'ENABLE_LOG_ALERTS=${ENABLE_LOG_ALERTS}'
      - 'CHANNEL_HANDLERS_LOG_FILE_TEMPLATE=${CHANNEL_HANDLERS_LOG_FILE_TEMPLATE}'
      - 'ALERTS_LOG_FILE=${ALERTS_LOG_FILE}'
      - 'TWIML=${TWIML}'
      - 'TWIML_IS_URL=${TWIML_IS_URL}'
      - 'CHANNELS_MANAGER_PUBLISHING_QUEUE_SIZE=${CHANNELS_MANAGER_PUBLISHING_QUEUE_SIZE}'
      - 'HEALTH_CHECKER_LOG_FILE_TEMPLATE=${HEALTH_CHECKER_LOG_FILE_TEMPLATE}'
      - 'NODE_MONITOR_PERIOD_SECONDS=${NODE_MONITOR_PERIOD_SECONDS}'
      - 'CHAINLINK_CONTRACTS_MONITOR_PERIOD_SECONDS=${CHAINLINK_CONTRACTS_MONITOR_PERIOD_SECONDS}'
      - 'NETWORK_MONITOR_PERIOD_SECONDS=${NETWORK_MONITOR_PERIOD_SECONDS}'
      - 'DOCKERHUB_TAGS_TEMPLATE=${DOCKERHUB_TAGS_TEMPLATE}'
      - 'SUBSTRATE_API_IP=${SUBSTRATE_API_IP}'
      - 'SUBSTRATE_API_PORT=${SUBSTRATE_API_PORT}'
      - 'WAIT_HOSTS=${RABBIT_IP}:${RABBIT_PORT}'
    build:
      context: './'
      dockerfile: './alerter/Health_Checker_Dockerfile'
    image: 'simplyvc/alerter_health_checker:1.3.0'
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - './alerter/logs:/opt/panic/alerter/logs'
    restart: always
    networks:
      panic_net:
        ipv4_address: '${HEALTH_CHECKER_IP}'
    depends_on:
      - alerter
      - rabbitmq

  api:
    environment:
      - 'API_PORT=${API_PORT}'
      - 'REDIS_IP=${REDIS_IP}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'REDIS_DB=${REDIS_DB}'
      - 'UNIQUE_ALERTER_IDENTIFIER=${UNIQUE_ALERTER_IDENTIFIER}'
      - 'DB_IP=${DB_IP_REPLICA_1}'
      - 'DB_PORT=${DB_PORT}'
      - 'DB_NAME=${DB_NAME}'
      - 'WAIT_HOSTS=${DB_IP_REPLICA_1}:${DB_PORT}, ${REDIS_IP}:${REDIS_PORT}, ${SUBSTRATE_API_IP}:${SUBSTRATE_API_PORT}'
      - 'UI_DASHBOARD_PORT=${UI_DASHBOARD_PORT}'
      - 'DEV_MODE=${DEV_MODE}'
      - 'UI_ACCESS_IP=${UI_ACCESS_IP}'
      - 'SUBSTRATE_API_IP=${SUBSTRATE_API_IP}'
      - 'SUBSTRATE_API_PORT=${SUBSTRATE_API_PORT}'
    build:
      context: './'
      dockerfile: './api/Dockerfile'
    image: 'simplyvc/panic_api:1.3.0'
    volumes:
      - './config:/opt/panic/config'
      - './certificates:/opt/panic/certificates'
    ports:
      - '${API_PORT}:9000'
    restart: always
    networks:
      panic_net:
        ipv4_address: '${API_IP}'
    depends_on:
      - redis
      - rs1
      - substrate-api

  ui:
    build:
      context: './'
      dockerfile: './ui/Dockerfile'
      args:
        - API_PORT
        - UI_DASHBOARD_PORT
    image: 'simplyvc/panic_ui:1.3.0'
    volumes:
      - './certificates:/opt/panic/certificates'
    ports:
      - '${UI_DASHBOARD_PORT}:3333'
    restart: always
    networks:
      panic_net:
        ipv4_address: '${UI_DASHBOARD_IP}'
    depends_on:
      - api

  substrate-api:
    environment:
      - 'SUBSTRATE_API_PORT=${SUBSTRATE_API_PORT}'
    build:
      context: './'
      dockerfile: './substrate-api/Dockerfile'
    image: 'simplyvc/panic_substrate_api:1.3.0'
    volumes:
      - './certificates:/opt/panic/certificates'
    restart: always
    networks:
      panic_net:
        ipv4_address: '${SUBSTRATE_API_IP}'

  migration:
    container_name: migration
    build:
      context: './'
      dockerfile: './scripts/Migration_Alerter_Dockerfile'
    image: 'simplyvc/panic_migration:1.3.0'
    environment:
      - 'DB_NAME=${DB_NAME}'
      - 'WAIT_HOSTS=${DB_IP_REPLICA_1}:${DB_PORT}, ${DB_IP_REPLICA_2}:${DB_PORT}, ${DB_IP_REPLICA_3}:${DB_PORT}'
    volumes:
      - './config:/opt/panic/config'
      - './api:/opt/panic/api'
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    networks:
      panic_net:
        ipv4_address: '${MIGRATION_IP}'
    depends_on:
      - mongo-startup

networks:
  panic_net:
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/24

volumes:
  db-data:
