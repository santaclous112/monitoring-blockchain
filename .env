# You can modify the UI access IP, dev configuration, usernames and passwords,
# logging configuration, monitoring periods, and publishing limits. Other values
# do not require changing because PANIC is run inside a docker container on an
# internal network.
# NB: Specifically do not modify port numbers.

# If you would like to change the docker network IPs due to a network clash,
# make sure that it obeys the subnet rules inside the docker-compose.yml file

# UI IP configuration
UI_ACCESS_IP=X.X.X.X

# Development configuration
DEV_MODE=false

# Mongo configuration
DB_NAME=panicdb

DB_PORT=27017

DB_IP_REPLICA_1=172.18.0.2
DB_IP_REPLICA_1_TEST=172.19.0.2

DB_IP_REPLICA_2=172.18.0.3
DB_IP_REPLICA_2_TEST=172.19.0.3

DB_IP_REPLICA_3=172.18.0.4
DB_IP_REPLICA_3_TEST=172.19.0.4

DB_IP_REPLICA_STARTUP=172.18.0.5
DB_IP_REPLICA_STARTUP_TEST=172.19.0.5

# Alerter configuration
ALERTER_IP=172.18.0.7
UNIQUE_ALERTER_IDENTIFIER=panic_alerter

# Redis configuration
REDIS_IP=172.18.0.8
REDIS_IP_TEST=172.19.0.8
REDIS_PORT=6379
REDIS_DB=10
REDIS_DB_TEST=11

# RabbitMQ configuration
RABBIT_IP=172.18.0.9
RABBIT_IP_TEST=172.19.0.9
RABBIT_PORT=5672

# Health Checker configuration
HEALTH_CHECKER_IP=172.18.0.10

# Tests configuration
TESTS_IP=172.19.0.11

# UI configuration
UI_DASHBOARD_IP=172.18.0.12
UI_DASHBOARD_PORT=3333

# API configuration
API_IP=172.18.0.13
API_IP_TEST=172.19.0.13
API_PORT=9000
API_PORT_TEST=9001

# Substrate API configuration
SUBSTRATE_API_IP=172.18.0.14
SUBSTRATE_API_PORT=8080

# Migration configuration
MIGRATION_IP=172.18.0.15

# Logs configuration - Log files with {} are Python template strings, where {}
# is replaced with text that makes the log file name specific to the process
# that logs to it. For example, system_monitor_{}.log may become
# system_monitor_validator.log.
LOGGING_LEVEL=INFO
DATA_STORE_LOG_FILE_TEMPLATE=logs/stores/{}.log
MONITORS_LOG_FILE_TEMPLATE=logs/monitors/{}.log
TRANSFORMERS_LOG_FILE_TEMPLATE=logs/data_transformers/{}.log
HEALTH_CHECKER_LOG_FILE_TEMPLATE=logs/health_checker/{}.log
MANAGERS_LOG_FILE_TEMPLATE=logs/managers/{}.log
ALERTERS_LOG_FILE_TEMPLATE=logs/alerters/{}.log
ALERT_ROUTER_LOG_FILE=logs/alert_router/alert_router.log
CHANNEL_HANDLERS_LOG_FILE_TEMPLATE=logs/channels/handlers/{}.log
CONFIG_MANAGER_LOG_FILE=logs/configs/configs_manager.log
ALERTS_LOG_FILE=logs/alerts/alerts.log

# GitHub monitoring configuration - This is a Python template string, where {}
# is replaced with (for example) w3f/substrate/ so that the complete link
# becomes: https://api.github.com/repos/w3f/substrate/releases
GITHUB_RELEASES_TEMPLATE=https://api.github.com/repos/{}releases

# DockerHub monitoring configuration - This is a Python template string, where
# the two {} are replaced with the namespace and repository name, so that in the
# case of nginx which belongs to the namespace library, the complete link becomes
# https://hub.docker.com/v2/repositories/library/nginx/tags
DOCKERHUB_TAGS_TEMPLATE=https://hub.docker.com/v2/repositories/{}/{}/tags

# Monitoring periods - These define how often a monitor runs an iteration of
# its monitoring loop.
SYSTEM_MONITOR_PERIOD_SECONDS=60
GITHUB_MONITOR_PERIOD_SECONDS=3600
DOCKERHUB_MONITOR_PERIOD_SECONDS=3600
NODE_MONITOR_PERIOD_SECONDS=10
CHAINLINK_CONTRACTS_MONITOR_PERIOD_SECONDS=10
NETWORK_MONITOR_PERIOD_SECONDS=60

# Publishers limits - These define how much messages should be stored in a
# publisher queue before starting to prune old messages. This happens when for
# some reason messages are not being sent by the publisher.
DATA_TRANSFORMER_PUBLISHING_QUEUE_SIZE=1000
ALERTER_PUBLISHING_QUEUE_SIZE=1000
CHANNELS_MANAGER_PUBLISHING_QUEUE_SIZE=1000
ALERT_ROUTER_PUBLISHING_QUEUE_SIZE=1000
CONFIG_PUBLISHING_QUEUE_SIZE=1000

# Console Output
ENABLE_CONSOLE_ALERTS=True

# Log Alerts to file
ENABLE_LOG_ALERTS=True

# Twilio Preferences
TWIML=<Response><Reject/></Response>
TWIML_IS_URL=false